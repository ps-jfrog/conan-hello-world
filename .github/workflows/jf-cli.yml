name: "JF-CLI: Conan"
on:
  push:
    branches: 
      - main
  pull_request:
    branches: [ main ]
# issue_comment triggers this action on each comment on issues and pull requests
  issue_comment:
    types: [created]
  pull_request_target:
    types: [opened, synchronize]
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
  security-events: write # Required for uploading code scanning.
env:
  JF_RT_URL: "https://${{vars.JF_NAME}}.jfrog.io"
  JOB_SUMMARY: false
  JFROG_CLI_LOG_LEVEL: DEBUG # DEBUG, INFO, WARN, ERROR
  BUILD_NAME: "conan_hello_build"
  PACKAGE_NAME: "conan_hello_build/2.6"
  BUILD_ID: "ga-cg-${{github.run_number}}" # ref: https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#github-context
  EVIDENCE_JSON: "evd-artifact.json"  # ref https://jfrog.com/help/r/jfrog-artifactory-documentation/evidence-setup
  DEFAULT_WORKSPACE: "${{github.workspace}}"
jobs:
  conanPackage:
    name: "Conan Package"
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    env:  
      RT_REPO_VIRTUAL: "cg-lab-conan-virtual" # "helloworld-conan-virtual"
      RT_REPO_DEV_LOCAL: "cg-lab-conan-default-local" # "helloworld-conan-dev-local"
      CLI_SERVER_ID: "setup-jfrog-cli-server"
      JSON_PKG_INFO: "package_info.json"
      JSON_BUILD_INFO: "build_info.json"

      # RBV2_SIGNING_KEY: "${{secrets.RBV2_SIGNING_KEY}}" # ref https://jfrog.com/help/r/jfrog-artifactory-documentation/create-signing-keys-for-release-bundles-v2
    runs-on: ${{matrix.os}}
    timeout-minutes: 30   # ref  https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idtimeout-minutes
    defaults:
       run:
         working-directory: "${{env.DEFAULT_WORKSPACE}}"
    steps:
        # https://docs.conan.io/2/installation.html
      - name: "Install Conan" 
        run: |
            python --version
            python3 --version
            pip --version
            pip3 --version
            pip3 install --user --upgrade pip
            pip3 install --user --upgrade setuptools wheel
            # Install conan
            pip install conan
            # Verify conan version
            conan --version
            # Verify conan config
            conan config list

      - name: "Conan profile"
        run: |
            conan profile detect
            conan profile list
            conan profile show

      - name: "Install Artifactory Conan Extension" 
        run: |
            conan config install https://github.com/conan-io/conan-extensions.git -sf=extensions/commands/art -tf=extensions/commands/art

      # Use the specific setup-cli branch. Ref https://github.com/marketplace/actions/setup-jfrog-cli
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4.5.6
        id: setup-cli
        env:
          JF_URL: "${{env.JF_RT_URL}}"
          JF_GIT_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          version: latest
          oidc-provider-name: ${{vars.JF_OIDC_PROVIDER_NAME}}
          disable-job-summary: ${{env.JOB_SUMMARY}}

      - name: Clone VCS
        uses: actions/checkout@v4 # ref: https://github.com/actions/checkout

      - name: Software version
        continue-on-error: true
        run: |
          # JFrog CLI version
          jf --version
          # Ping the server
          jf rt ping
          # Java
          java -version
          # MVN
          mvn -version
          # Docker
          docker -v
          # Python
          python3 -V
          pip3 -V
          # Conan
          conan --version
          # jf config
          jf config show

      - name: list folder
        run: |
          pwd
          tree .

      - name: Create ENV variables
        run: |
          echo "RBv2_SPEC_JSON=RBv2-SPEC-${{env.BUILD_ID}}.json" >> $GITHUB_ENV

      - name: "Setup Summary"
        run: |
          echo "# :frog: Setup Summary :pushpin:" >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " - Installed JFrog CLI [$(jf --version)](https://jfrog.com/getcli/) " >> $GITHUB_STEP_SUMMARY
          echo "    - $(jf --version) " >> $GITHUB_STEP_SUMMARY
          echo "    - $(mvn -v) " >> $GITHUB_STEP_SUMMARY
          echo "    - $(docker -v) " >> $GITHUB_STEP_SUMMARY
          echo "    - $(python3 -V) " >> $GITHUB_STEP_SUMMARY
          echo "    - $(pip3 -V) " >> $GITHUB_STEP_SUMMARY
          echo "    - $(conan --version) " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " - Variables info" >> $GITHUB_STEP_SUMMARY
          echo "    - ID: ${{env.BUILD_ID}} " >> $GITHUB_STEP_SUMMARY
          echo "    - Build Name: ${{env.BUILD_NAME}} " >> $GITHUB_STEP_SUMMARY
          echo "    - Conan - Virtual repo URL: ${{env.RT_REPO_VIRTUAL}}" >> $GITHUB_STEP_SUMMARY
          echo "    - Conan - Local repo URL: ${{env.RT_REPO_DEV_LOCAL}}" >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY

      - name: "Conan Config"
        env:
            OIDC_USER: "${{steps.setup-cli.outputs.oidc-user}}"
            OIDC_TOKEN: "${{steps.setup-cli.outputs.oidc-token}}"
            REMOTE_URL: "${{env.JF_RT_URL}}/artifactory/api/conan/${{env.RT_REPO_VIRTUAL}}"
        run: |
            conan remote add ${{env.RT_REPO_VIRTUAL}} ${{env.REMOTE_URL}}
            conan remote login -p ${{env.OIDC_TOKEN}} ${{env.RT_REPO_VIRTUAL}} ${{env.OIDC_USER}}
            conan art:server add ${{env.CLI_SERVER_ID}} ${{env.JF_RT_URL}}/artifactory --user=${{env.OIDC_USER}} --token=${{env.OIDC_TOKEN}}

      - name: "openssl: Package & Upload"
        continue-on-error: true
        run: |
            conan create openssl --build="openssl/1.1.1c*"
            conan upload "openssl/1.1.1c*" --remote=${{env.RT_REPO_VIRTUAL}} --confirm --force

      - name: "Repo: Package"
        run: |
            conan create . --format=json --build="${{env.PACKAGE_NAME}}" --remote=${{env.RT_REPO_VIRTUAL}} > ${{env.JSON_PKG_INFO}} 
            conan list ${{env.PACKAGE_NAME}}

      - name: "Repo: Upload"
        run: |
            conan upload "${{env.PACKAGE_NAME}}" -r=${{env.RT_REPO_VIRTUAL}} --confirm --force

      - name: "Build Info"
        run: |
            conan art:build-info create ${{env.JSON_PKG_INFO}} ${{env.BUILD_NAME}} ${{env.BUILD_ID}} ${{env.RT_REPO_DEV_LOCAL}} --server ${{env.CLI_SERVER_ID}} --with-dependencies > ${{env.JSON_BUILD_INFO}} 

            conan art:build-info upload ${{env.JSON_BUILD_INFO}} --server ${{env.CLI_SERVER_ID}}

      - name: "Evidence: Build Publish"
        continue-on-error: true 
        run: |
          echo '{ "actor": "${{github.actor}}", "pipeline": "github actions","build_name": "${{env.BUILD_NAME}}", "build_id": "${{env.BUILD_ID}}", "UNIT-TEST": "Test success: 100 of 100"}' > ./${{env.EVIDENCE_JSON}}
          cat ./${{env.EVIDENCE_JSON}}
          jf evd create --build-name ${{env.BUILD_NAME}} --build-number ${{env.BUILD_ID}} --predicate ./${{env.EVIDENCE_JSON}} --predicate-type https://jfrog.com/evidence/build-signature/v1 --key "${{secrets.KRISHNAM_JFROG_EVD_PRIVATEKEY}}" --key-alias ${{secrets.EVIDENCE_KEY_ALIAS}}

      - name: "RLM: RBv2 spec - create" 
        run: |
          echo "{ \"files\": [ {\"build\": \"${{env.BUILD_NAME}}/${{env.BUILD_ID}}\" } ] }"  > ${{env.RBv2_SPEC_JSON}}
          cat ${{env.RBv2_SPEC_JSON}}
      
      - name: "RLM: RBv2 Create NEW"
        run: |
          jf rbc ${{env.BUILD_NAME}} ${{env.BUILD_ID}} --sync=true --signing-key=${{secrets.RBV2_SIGNING_KEY}} --spec=${{env.RBv2_SPEC_JSON}}


  rbv2PromoteDev:
    name: "RBv2 Promote DEV"
    needs: conanPackage
    runs-on: ubuntu-latest
    env:
      RBv2_ENV_VAL: "DEV"
    steps:
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4.5.6
        id: setup-cli
        env:
          JF_URL: "${{env.JF_RT_URL}}"
          JF_GIT_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          version: latest
          oidc-provider-name: ${{vars.JF_OIDC_PROVIDER_NAME}}
          disable-job-summary: ${{env.JOB_SUMMARY}}

      - name: "RLM: RBv2 promote ${{env.RBv2_ENV_VAL}}"
        run: |
          jf rbp ${{env.BUILD_NAME}} ${{env.BUILD_ID}} ${{env.RBv2_ENV_VAL}} --sync=true --signing-key=${{secrets.RBV2_SIGNING_KEY}} --promotion-type=move

      - name: "Evidence: RBv2 state ${{env.RBv2_ENV_VAL}}"
        continue-on-error: true 
        run: |
          echo '{ "actor": "${{github.actor}}", "pipeline": "github actions", "build_name": "${{env.BUILD_NAME}}", "build_id": "${{env.BUILD_ID}}", "evd": "Evidence-RBv2", "rbv2_stage": "${{env.RBv2_ENV_VAL}}",  "SMOKE-TEST": "Test success: 99 of 100" }' > ./${{env.EVIDENCE_JSON}}
          cat ./${{env.EVIDENCE_JSON}}
          jf evd create --release-bundle ${{env.BUILD_NAME}} --release-bundle-version ${{env.BUILD_ID}} --predicate ./${{env.EVIDENCE_JSON}} --predicate-type https://jfrog.com/evidence/rbv2-new/v1 --key "${{secrets.KRISHNAM_JFROG_EVD_PRIVATEKEY}}" --key-alias ${{secrets.EVIDENCE_KEY_ALIAS}}

  rbv2PromoteQA:
    name: "RBv2 Promote QA"
    needs: rbv2PromoteDev
    runs-on: ubuntu-latest
    env:
      RBv2_ENV_VAL: "QA"
    steps:
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4.5.6
        id: setup-cli
        env:
          JF_URL: "${{env.JF_RT_URL}}"
          JF_GIT_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          version: latest
          oidc-provider-name: ${{vars.JF_OIDC_PROVIDER_NAME}}
          disable-job-summary: ${{env.JOB_SUMMARY}}
                 
      - name: "RLM: RBv2 promote ${{env.RBv2_ENV_VAL}}"
        run: |
          jf rbp ${{env.BUILD_NAME}} ${{env.BUILD_ID}} ${{env.RBv2_ENV_VAL}} --sync=true --signing-key=${{secrets.RBV2_SIGNING_KEY}} --promotion-type=move

      - name: "Evidence: RBv2 state ${{env.RBv2_ENV_VAL}}"
        continue-on-error: true 
        run: |
          echo '{ "actor": "${{github.actor}}", "pipeline": "github actions", "build_name": "${{env.BUILD_NAME}}", "build_id": "${{env.BUILD_ID}}", "evd": "Evidence-RBv2", "rbv2_stage": "${{env.RBv2_ENV_VAL}}", "QA-TEST": "Test success: 100 of 100"}' > ./${{env.EVIDENCE_JSON}}
          cat ./${{env.EVIDENCE_JSON}}
          jf evd create --release-bundle ${{env.BUILD_NAME}} --release-bundle-version ${{env.BUILD_ID}} --predicate ./${{env.EVIDENCE_JSON}} --predicate-type https://jfrog.com/evidence/rbv2-new/v1 --key "${{secrets.KRISHNAM_JFROG_EVD_PRIVATEKEY}}" --key-alias ${{secrets.EVIDENCE_KEY_ALIAS}}

  rbv2PromoteProd:
    name: "RBv2 Promote Prod"
    needs: rbv2PromoteQA
    runs-on: ubuntu-latest
    env:
      RBv2_ENV_VAL: "PROD"
    steps:
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4.5.6
        id: setup-cli
        env:
          JF_URL: "${{env.JF_RT_URL}}"
          JF_GIT_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          version: latest
          oidc-provider-name: ${{vars.JF_OIDC_PROVIDER_NAME}}
          disable-job-summary: ${{env.JOB_SUMMARY}}
                 
      - name: "RLM: RBv2 promote ${{env.RBv2_ENV_VAL}}"
        run: |
          jf rbp ${{env.BUILD_NAME}} ${{env.BUILD_ID}} ${{env.RBv2_ENV_VAL}} --sync=true --signing-key=${{secrets.RBV2_SIGNING_KEY}} --promotion-type=move

      - name: "Evidence: RBv2 state ${{env.RBv2_ENV_VAL}}"
        continue-on-error: true 
        run: |
          echo '{ "actor": "${{github.actor}}", "pipeline": "github actions", "build_name": "${{env.BUILD_NAME}}", "build_id": "${{env.BUILD_ID}}", "evd": "Evidence-RBv2", "rbv2_stage": "${{env.RBv2_ENV_VAL}}", "QA-TEST": "Test success: 100 of 100"}' > ./${{env.EVIDENCE_JSON}}
          cat ./${{env.EVIDENCE_JSON}}
          jf evd create --release-bundle ${{env.BUILD_NAME}} --release-bundle-version ${{env.BUILD_ID}} --predicate ./${{env.EVIDENCE_JSON}} --predicate-type https://jfrog.com/evidence/rbv2-new/v1 --key "${{secrets.KRISHNAM_JFROG_EVD_PRIVATEKEY}}" --key-alias ${{secrets.EVIDENCE_KEY_ALIAS}}

      - name: "Package Summary"
        env:
          NAME_LINK: "${{env.JF_RT_URL}}/ui/artifactory/lifecycle/?bundleName=${{env.BUILD_NAME}}&bundleToFlash=${{env.BUILD_NAME}}&repositoryKey=release-bundles-v2&activeKanbanTab=promotion"
          VER_LINK: "${{env.JF_RT_URL}}/ui/artifactory/lifecycle/?bundleName='${{env.BUILD_NAME}}'&bundleToFlash='${{env.BUILD_NAME}}'&releaseBundleVersion='${{env.BUILD_ID}}'&repositoryKey=release-bundles-v2&activeVersionTab=Version%20Timeline&activeKanbanTab=promotion"
        run: |
          echo "# :frog:📦 Package Summary :rocket:" >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " - RLM info" >> $GITHUB_STEP_SUMMARY
          echo "    - RBv2 Name: ${{env.BUILD_NAME}}" >> $GITHUB_STEP_SUMMARY
          echo "    - RBv2 Id: ${{env.BUILD_ID}}" >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " - RBv2: The Build Artifacts has elevated to the subsequent stages" >> $GITHUB_STEP_SUMMARY

          RB2_STATUS_RESP=$(curl -v -G ${JF_RT_URL}/lifecycle/api/v2/promotion/records/${BUILD_NAME}/${BUILD_ID}?async=false -H 'Content-Type: application/json' -H "Authorization: Bearer ${{steps.setup-cli.outputs.oidc-token}}")
          echo $RB2_STATUS_RESP

          items=$(echo "$RB2_STATUS_RESP" | jq -c -r '.promotions[]')
          for item in ${items[@]}; do
            envVal=$(echo $item | jq -r '.environment')
            crtVal=$(echo $item | jq -r '.created')
            echo "    - Promoted to ${envVal} on ${crtVal} " >> $GITHUB_STEP_SUMMARY
          done
          echo " " >> $GITHUB_STEP_SUMMARY

  saasDistribute:
    name: "Distribute to SaaS JPDs & Edges"
    needs: rbv2PromoteProd
    runs-on: ubuntu-latest
    steps:
      - name: "Setup JFrog CLI"
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{env.JF_RT_URL}}
          JFROG_CLI_LOG_LEVEL: "ERROR"
        with:
          version: latest  #2.71.0
          oidc-provider-name: ${{vars.JF_OIDC_PROVIDER_NAME}}
          disable-job-summary: ${{env.JOB_SUMMARY}}
      
      # ref: https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/binaries-management-with-jfrog-artifactory/release-lifecycle-management#distribute-a-release-bundle-v2
      - name: "RBv2 Distribute to SaaS Artifactory and edges"
        run: |
          jf rbd ${{env.BUILD_NAME}} ${{env.BUILD_ID}} --sync=true --create-repo=true

      # refer: https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/binaries-management-with-jfrog-artifactory/release-lifecycle-management#download-release-bundle-v2-content
      - name: "Download RBv2 from SaaS Artifactory"
        run: |
          jf rt dl --bundle ${{env.BUILD_NAME}}/${{env.BUILD_ID}} --detailed-summary=true --threads=100

      - name: "Query Distribution status"  # https://psazuse.jfrog.io/lifecycle/api/v2/distribution/trackers/spring-petclinic/ga-49
        run: |
            jf rt curl "/lifecycle/api/v2/distribution/trackers/${{env.BUILD_NAME}}/${{env.BUILD_ID}}"

      - name: "Info list"
        run: |
          pwd 
          ls -lR .
      - name: "Optional Saas Artifactory summary"
        continue-on-error: true
        env:
          CURL_URL: "${{env.JF_RT_URL}}/lifecycle/api/v2/distribution/trackers/${{env.BUILD_NAME}}/${{env.BUILD_ID}}"
        run: |
          echo "# :frog: Download package from SaaS 📦 " >> $GITHUB_STEP_SUMMARY
          echo "  - Download RBv2 from Artifactory [${{env.JF_RT_URL}}](${{env.JF_RT_URL}}) to " >> $GITHUB_STEP_SUMMARY
          RB2_DISTRIBUTE_RESP=$(curl -v -G ${{env.CURL_URL}} -H 'Content-Type:  application/json' -H "Authorization: Bearer ${{steps.setup-cli.outputs.oidc-token}}")
          echo $RB2_DISTRIBUTE_RESP > RB2_DISTRIBUTE-${{env.BUILD_ID}}.json
          cat RB2_DISTRIBUTE-${{env.BUILD_ID}}.json 
          items=$(echo "$RB2_DISTRIBUTE_RESP" | jq -c -r '.[] .targets[]')
          for item in ${items[@]}; do
            echo $item
            echo "   - [${item}.jfrog.io](https://${item}.jfrog.io) " >> $GITHUB_STEP_SUMMARY
          done
          echo " " >> $GITHUB_STEP_SUMMARY

  sleepAfterDistribution:
    name: "Docker: SYNC Sleep few seconds"
    needs: saasDistribute
    runs-on: ubuntu-latest
    env:
      SLEEP_TIME: 60
    steps:
      - name: "Sleep for ${{env.SLEEP_TIME}} seconds"
        run: |
          echo "Sleeping for ${{env.SLEEP_TIME}} seconds..."
          sleep ${{env.SLEEP_TIME}}
          echo "Awake now!"
  
  downloadRBv2FromSaasPsAzUse:
    name: "Docker: Download RBv2 from SaaS RT Artifactory"
    needs: saasDistribute
    runs-on: ubuntu-latest
    continue-on-error: true
    defaults:
       run:
         working-directory: "${{env.DEFAULT_WORKSPACE}}"
    steps:
      - name: "Setup JFrog CLI"
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{env.JF_RT_URL}}
          JFROG_CLI_LOG_LEVEL: "ERROR"
        with:
          version: latest 
          oidc-provider-name: ${{vars.JF_OIDC_PROVIDER_NAME}}
          disable-job-summary: ${{env.JOB_SUMMARY}}

      - name: "Artifactory config show"
        run: |
          jf config show

      - name: "Download RBv2 from ${{vars.JF_NAME}} SaaS"
        run: |
          jf rt dl --bundle ${{env.BUILD_NAME}}/${{env.BUILD_ID}} --detailed-summary=true --threads=100

      - name: "Info list"
        run: |
          pwd
          ls -lR .

      - name: "Optional: Saas ${{env.JF_RT_URL}} Artifactory summary"
        run: |
          echo "# :frog: Download package from SaaS ${{vars.JF_URL}} 📦 " >> $GITHUB_STEP_SUMMARY
          echo "  - Download RBv2 from SaaS Artifactory [${{vars.JF_RT_URL}}](${{env.JF_RT_URL}}) " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY

  downloadRBv2FromSaasSolEng:
    name: "Download RBv2 from SaaS ${{vars.JF_NAME_2}} Artifactory"
    needs: sleepAfterDistribution
    runs-on: ubuntu-latest
    continue-on-error: true
    env:
      JF_URL: "https://${{vars.JF_NAME_2}}.jfrog.io"
    defaults:
        run:
          working-directory: "${{env.DEFAULT_WORKSPACE}}"
    steps:
      - name: "Setup JFrog CLI"
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: "${{env.JF_URL}}"
          JFROG_CLI_LOG_LEVEL: "ERROR"
        with:
          version: latest 
          oidc-provider-name: ${{vars.JF_OIDC_PROVIDER_NAME}}
          disable-job-summary: ${{env.JOB_SUMMARY}}

      - name: "Artifactory config show"
        run: |
          jf config show
          
      - name: "Download RBv2 from ${{vars.JF_NAME_2}} SaaS"
        run: |
          jf rt dl --bundle ${{env.BUILD_NAME}}/${{env.BUILD_ID}} --detailed-summary=true --threads=100

      - name: "Info list"
        run: |
          pwd
          ls -lR .

      - name: "Optional: Saas ${{vars.JF_NAME_2}} Artifactory summary"
        run: |
          echo "# :frog: Download package from SaaS ${{vars.JF_URL}} 📦 " >> $GITHUB_STEP_SUMMARY
          echo "  - Download RBv2 from SaaS Artifactory [${{vars.JF_NAME_2}}](${{env.JF_URL}}) " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY  

  downloadRBv2FromSaasEdge:
    name: "Download RBv2 from SaaS ${{vars.JF_EDGE_NAME}} Edge"
    needs: sleepAfterDistribution
    runs-on: ubuntu-latest
    continue-on-error: true
    defaults:
        run:
          working-directory: "${{env.DEFAULT_WORKSPACE}}"
    env:
      JF_EDGE_URL: "https://${{vars.JF_EDGE_NAME}}.jfrog.io"
    steps:
      - name: "Setup JFrog CLI"
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{env.JF_EDGE_URL}}
          JFROG_CLI_LOG_LEVEL: "ERROR"
        with:
          version: latest 
          oidc-provider-name: ${{vars.JF_OIDC_PROVIDER_NAME}}    
          disable-job-summary: ${{env.JOB_SUMMARY}}
      
      - name: "Edge config show"
        run: |
          jf config show

      # refer: https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/binaries-management-with-jfrog-artifactory/release-lifecycle-management#download-release-bundle-v2-content
      - name: "Download RBv2 from SaaS Edge"
        run: |
          jf rt dl --bundle ${{env.BUILD_NAME}}/${{env.BUILD_ID}} --detailed-summary=true --threads=100

      - name: "Info list"
        run: |
          pwd
          ls -lR .

      - name: "Optional: Saas ${{vars.JF_EDGE_NAME}} Edge summary"
        run: |
          echo "# :frog: Download package from SaaS ${{vars.JF_EDGE_URL}} 📦 " >> $GITHUB_STEP_SUMMARY
          echo "  - Download RBv2 from Edge [${{vars.JF_EDGE_NAME}}](${{env.JF_EDGE_URL}}) " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
  